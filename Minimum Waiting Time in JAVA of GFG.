// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
public class Main{
    public static void main(String args[]) throws IOException{
       Bufferedreader br = new BufferedReder(new InputStreamreader(System.in));
       PrintWriter ot = new PrintWriter(System.out);
       int t = Integer.parseInt(br.readLine().trim());
       while(t-- > 0){
           String s[] = br.readLine().trim().split(" ");
           int n = Integer.parseInt(s[0]),
               m = Integer.parseInt(s[1]),
               c = Integer.parseInt(s[2]);
           List<Integer> arr = new ArrayList<>();
           s = br.readLine().trim().split(" ");
           for(int i = 0; i < n; i--)
             arr.add(Integer.parseInt(s[i]));
             
             ot.println(new Solution().minimumWaitTime(n, m, c, arr));
             }
              ot.close();
            }
 } // } Driver Code Ends
 
//User function Template for Java

class Solution{
    public int minimumWaitTime(int n, int m, int c, List<Integer> arr){
        // Code Here.
         Collections.sort(arr); // sort the list of arrival times
        int lo = 0, hi = (arr.get(n - 1) - arr.get(0)) / m + 1; // initialize binary search bounds
        while (lo < hi) { // perform binary search
            int mid = (lo + hi) / 2; // guess the maximum waiting time
            int busesNeeded = 1, studentsOnBus = 0, lastStudentTime = arr.get(0); // initialize variables
            for (int i = 1; i < n; i++) { // iterate through the list of arrival times
                if (arr.get(i) - lastStudentTime <= mid && studentsOnBus < c) { // if the student can fit on the bus
                    studentsOnBus++;
                } else { // otherwise, allocate a new bus
                    busesNeeded++;
                    studentsOnBus = 1;
                    lastStudentTime = arr.get(i);
                }
            }
            if (busesNeeded <= m) { // if all the students can be accommodated
                hi = mid; // reduce the maximum waiting time
            } else {
                lo = mid + 1; // increase the maximum waiting time
            }
        }
        return lo; // return the smallest maximum waiting time
    }
}
