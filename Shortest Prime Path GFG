class Solution
{
   int[] prime;
    Solution()
    {
        prime = new int[10000];
        Arrays.fill(prime,1);
        prime[1]=0;
        for(int i=2; i<=9999; i++)
        {
            if(prime[i]==1)
            {
                for(int j=i*i; j<=9999; j+=i)
                prime[j]=0;
            }
        }
    }
    
    public int shortestPath(int num1,int num2){
        int ans[] = new int[10000];
        Arrays.fill(ans, -1);
        boolean vis[] = new boolean[10000];
        Queue<Integer> q = new LinkedList<>();
        q.add(num1); vis[num1]=false; ans[num1]=0;
        
        while(!q.isEmpty())
        {
            int curr = q.poll();
            if(vis[curr]) continue;
            
            String x = Integer.toString(curr);
            for(int i=0; i<4; i++)
            
            for(char ch='0';ch<='9';ch++)
            {
                if(ch==x.charAt(i) || (ch=='0' & i==0)) continue;
                String y = x.substring(0,i) + ch + x.substring(i+1);
                int z = Integer.valueOf(y);
                if(prime[z]==1 && ans[z]==-1)
                {
                    ans[z] = 1+ ans[curr];
                    q.add(z);
                }
            }
        }
        return ans[num2];
    }
}
