//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		while (T-- > 0) {
			int n = sc.nextInt();
			int m = sc.nextInt();
			int[][] edge = new int[m][3];
			for (int i = 0; i < m; i++) {
				edge[i][0] = sc.nextInt();
				edge[i][1] = sc.nextInt();
				edge[i][2] = sc.nextInt();
			}
			Solution obj = new Solution();
			int res[] = obj.shortestPath(n, m,edge);
			for (int i = 0; i < n; i++) {
				System.out.print(res[i] + " ");
			}
			System.out.println();
		}
	}
}
// } Driver Code Ends


//User function Template for Java
class Solution {

	public int[] shortestPath(int N,int M, int[][] edges) {
		//Code here
		 int[] dist = new int[N];
        Arrays.fill(dist, -1);
        // Distance from the source vertex to itself is 0
        dist[0] = 0;

        // Create an adjacency list to represent the graph
        Map<Integer, List<int[]>> adjList = new HashMap<>();
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int weight = edge[2];
            adjList.computeIfAbsent(u, k -> new ArrayList<>()).add(new int[]{v, weight});
        }

        // Priority queue to get the next vertex with the minimum distance
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]); // (vertex, distance)
        pq.offer(new int[]{0, 0});

        while (!pq.isEmpty()) {
            int[] node = pq.poll();
            int u = node[0];
            int d = node[1];

            // If the distance to the current vertex is already smaller than the popped one, ignore it
            if (dist[u] != -1 && dist[u] < d) {
                continue;
            }

            for (int[] neighbor : adjList.getOrDefault(u, Collections.emptyList())) {
                int v = neighbor[0];
                int weight = neighbor[1];
                int newDist = d + weight;

                // If the new distance is smaller than the current distance to v, update the distance
                if (dist[v] == -1 || newDist < dist[v]) {
                    dist[v] = newDist;
                    pq.offer(new int[]{v, newDist});
                }
            }
        }

        return dist;
	}
}
